import { Telegraf } from 'telegraf';
import { BotContext } from '../middleware/session.middleware.js';
import { logger } from '../../utils/logger.js';

export const registerFeaturesScene = (bot: Telegraf<BotContext>) => {
  const featureOptions = [
    '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', 
    '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤', 
    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM', 
    'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
    'AI-—Ñ—É–Ω–∫—Ü–∏–∏',
    '–î—Ä—É–≥–æ–µ'
  ];
  
  bot.hears(featureOptions, async (ctx) => {
    if (ctx.session.currentScene !== 'features') return;
    
    if (!ctx.session.inquiryData.features) {
      ctx.session.inquiryData.features = ctx.message.text;
    } else {
      ctx.session.inquiryData.features += `, ${ctx.message.text}`;
    }
    
    logger.info(`User ${ctx.from.id} added feature: ${ctx.message.text}`);
    
    await ctx.reply(`–§—É–Ω–∫—Ü–∏—è "${ctx.message.text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.`, {
      reply_markup: {
        keyboard: [
          [{ text: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' }, { text: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤' }],
          [{ text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' }, { text: 'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }],
          [{ text: 'AI-—Ñ—É–Ω–∫—Ü–∏–∏' }, { text: '–î—Ä—É–≥–æ–µ' }],
          [{ text: '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' }, { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', async (ctx) => {
    if (ctx.session.currentScene !== 'features') return;
    
    if (!ctx.session.inquiryData.features) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.');
      return;
    }
    
    logger.info(`User ${ctx.from.id} completed features selection: ${ctx.session.inquiryData.features}`);
    
    await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:', {
      reply_markup: {
        keyboard: [
          [{ text: '1-2 –Ω–µ–¥–µ–ª–∏' }, { text: '3-4 –Ω–µ–¥–µ–ª–∏' }],
          [{ text: '1-2 –º–µ—Å—è—Ü–∞' }, { text: '3+ –º–µ—Å—è—Ü–µ–≤' }],
          [{ text: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  const timelineOptions = ['1-2 –Ω–µ–¥–µ–ª–∏', '3-4 –Ω–µ–¥–µ–ª–∏', '1-2 –º–µ—Å—è—Ü–∞', '3+ –º–µ—Å—è—Ü–µ–≤', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'];
  
  bot.hears(timelineOptions, async (ctx) => {
    if (ctx.session.currentScene !== 'features') return;
    
    ctx.session.inquiryData.timeline = ctx.message.text;
    logger.info(`User ${ctx.from.id} set timeline: ${ctx.session.inquiryData.timeline}`);
    
    ctx.session.currentScene = 'budget';
    await ctx.reply('–ö–∞–∫–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?', {
      reply_markup: {
        keyboard: [
          [{ text: '–¥–æ 100 000 ‚ÇΩ' }, { text: '100 000 - 300 000 ‚ÇΩ' }],
          [{ text: '300 000 - 600 000 ‚ÇΩ' }, { text: '–æ—Ç 600 000 ‚ÇΩ' }],
          [{ text: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    if (ctx.session.currentScene !== 'features') return;
    
    logger.info(`User ${ctx.from.id} went back to goal screen`);
    ctx.session.currentScene = 'goal';
    await ctx.reply('–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?', {
      reply_markup: {
        keyboard: [
          [{ text: '–ò–Ω—Ñ–æ-–±–æ—Ç' }, { text: '–ë–∏–∑–Ω–µ—Å-–±–æ—Ç' }],
          [{ text: '–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂' }, { text: '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç' }],
          [{ text: '–î—Ä—É–≥–æ–µ' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    if (ctx.session.currentScene !== 'features') return;
    
    logger.info(`User ${ctx.from.id} cancelled inquiry`);
    
    ctx.session.inquiryData = {
      name: '',
      contact: '',
      projectType: '',
      projectDescription: '',
      budget: '',
      features: '',
      timeline: ''
    };
    
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â—ë —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
};
