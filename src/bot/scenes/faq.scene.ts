import { Telegraf } from 'telegraf';
import { BotContext } from '../middleware/session.middleware.js';
import { generateResponse } from '../../services/openai.service.js';
import { logger } from '../../utils/logger.js';

export const registerFaqScene = (bot: Telegraf<BotContext>) => {
  const topics = {
    'üíª –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': '–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–°–µ–∫—Ç–æ—Ä", –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –ø–æ–¥—Ö–æ–¥—ã, –æ–ø—ã—Ç –∏ –ø—Ä–∏–º–µ—Ä—ã',
    'üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': '–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–±–∏–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–°–µ–∫—Ç–æ—Ä", –∫–∞–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã',
    'ü§ñ AI-—Ä–µ—à–µ–Ω–∏—è': '–†–∞—Å—Å–∫–∞–∂–∏ –æ AI-—Ä–µ—à–µ–Ω–∏—è—Ö –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–°–µ–∫—Ç–æ—Ä", –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã',
    'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥': '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–°–µ–∫—Ç–æ—Ä", –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ã, –æ—Ç —á–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç —Ü–µ–Ω–∞'
  };

  Object.entries(topics).forEach(([topic, prompt]) => {
    bot.hears(topic, async (ctx) => {
      if (ctx.session.currentScene !== 'faq') return;
      
      logger.info(`User ${ctx.from.id} asked about ${topic}`);
      await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...');
      
      try {
        const response = await generateResponse(prompt);
        await ctx.reply(response, {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [
              [{ text: 'üíª –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' }, { text: 'üì± –ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞' }],
              [{ text: 'ü§ñ AI-—Ä–µ—à–µ–Ω–∏—è' }, { text: 'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
            ],
            resize_keyboard: true
          }
        });
      } catch (error) {
        logger.error('Error generating FAQ response', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    });
  });

  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    if (ctx.session.currentScene !== 'faq') return;
    
    logger.info(`User ${ctx.from.id} returned to welcome screen`);
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
};
