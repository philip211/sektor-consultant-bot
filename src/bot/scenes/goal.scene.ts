import { Telegraf } from 'telegraf';
import { BotContext } from '../middleware/session.middleware.js';
import { logger } from '../../utils/logger.js';

export const registerGoalScene = (bot: Telegraf<BotContext>) => {
  bot.on('text', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    if (!ctx.session.inquiryData.projectType) {
      ctx.session.inquiryData.projectType = ctx.message.text;
      logger.info(`User ${ctx.from.id} set project goal: ${ctx.session.inquiryData.projectType}`);
      
      ctx.session.currentScene = 'features';
      await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å: ${ctx.session.inquiryData.projectType}. 

–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∞—à –±–æ—Ç?`, {
        reply_markup: {
          keyboard: [
            [{ text: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' }, { text: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤' }],
            [{ text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' }, { text: 'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }],
            [{ text: 'AI-—Ñ—É–Ω–∫—Ü–∏–∏' }, { text: '–î—Ä—É–≥–æ–µ' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    }
  });
  
  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    logger.info(`User ${ctx.from.id} went back to welcome screen`);
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    logger.info(`User ${ctx.from.id} cancelled inquiry`);
    
    ctx.session.inquiryData = {
      name: '',
      contact: '',
      projectType: '',
      projectDescription: '',
      budget: '',
      features: '',
      timeline: ''
    };
    
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â—ë —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
};
