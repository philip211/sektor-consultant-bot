import { Telegraf } from 'telegraf';
import { BotContext } from '../middleware/session.middleware.js';
import { logger } from '../../utils/logger.js';
import { generateSuggestions } from '../../services/openai.service.js';

export const registerGoalScene = (bot: Telegraf<BotContext>) => {
  const goalOptions = [
    '–ò–Ω—Ñ–æ-–±–æ—Ç', 
    '–ë–∏–∑–Ω–µ—Å-–±–æ—Ç', 
    '–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂', 
    '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç',
    '–î—Ä—É–≥–æ–µ'
  ];
  
  bot.hears(goalOptions, async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    ctx.session.inquiryData.projectType = ctx.message.text;
    logger.info(`User ${ctx.from.id} set project type: ${ctx.session.inquiryData.projectType}`);
    
    await ctx.reply('–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:', {
      reply_markup: {
        keyboard: [
          [{ text: 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.on('text', async (ctx) => {
    if (ctx.session.currentScene !== 'goal' || goalOptions.includes(ctx.message.text) || 
        ctx.message.text === 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' || ctx.message.text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' || 
        ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') return;
    
    ctx.session.inquiryData.projectGoal = ctx.message.text;
    logger.info(`User ${ctx.from.id} set project goal: ${ctx.session.inquiryData.projectGoal}`);
    
    try {
      const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞: "${ctx.session.inquiryData.projectGoal}", –ø—Ä–µ–¥–ª–æ–∂–∏ 2-3 –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç–µ. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º.`;
      
      const suggestions = await generateSuggestions(prompt);
      
      ctx.session.currentScene = 'features';
      await ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π —Ü–µ–ª–∏:\n\n${suggestions}\n\n–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –≤ –≤–∞—à–µ–º –±–æ—Ç–µ?`, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' }, { text: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤' }],
            [{ text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' }, { text: 'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }],
            [{ text: 'AI-—Ñ—É–Ω–∫—Ü–∏–∏' }, { text: '–î—Ä—É–≥–æ–µ' }],
            [{ text: 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error('Error generating recommendations', error);
      
      ctx.session.currentScene = 'features';
      await ctx.reply('–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –≤ –≤–∞—à–µ–º –±–æ—Ç–µ?', {
        reply_markup: {
          keyboard: [
            [{ text: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' }, { text: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤' }],
            [{ text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' }, { text: 'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }],
            [{ text: 'AI-—Ñ—É–Ω–∫—Ü–∏–∏' }, { text: '–î—Ä—É–≥–æ–µ' }],
            [{ text: 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    }
  });
  
  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    logger.info(`User ${ctx.from.id} went back to inquiry`);
    ctx.session.currentScene = 'inquiry';
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email):');
  });
  
  bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    logger.info(`User ${ctx.from.id} cancelled inquiry`);
    
    ctx.session.inquiryData = {
      name: '',
      contact: '',
      username: '',
      projectType: '',
      projectGoal: '',
      projectDescription: '',
      features: '',
      integrations: '',
      timeline: '',
      budget: '',
      specialRequirements: '',
      clientComment: ''
    };
    
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â—ë —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'goal') return;
    
    logger.info(`User ${ctx.from.id} requested AI help from goal scene`);
    ctx.session.currentScene = 'ai-help';
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç AI –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å:', {
      reply_markup: {
        keyboard: [
          [{ text: 'üí° –ò–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π' }],
          [{ text: 'üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞' }],
          [{ text: 'üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
};
