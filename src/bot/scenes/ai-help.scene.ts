import { Telegraf } from 'telegraf';
import { BotContext } from '../middleware/session.middleware.js';
import { logger } from '../../utils/logger.js';
import { generateResponse, generateSuggestions } from '../../services/openai.service.js';

export const registerAiHelpScene = (bot: Telegraf<BotContext>) => {
  bot.hears('ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏', async (ctx) => {
    logger.info(`User ${ctx.from.id} requested AI suggestions`);
    ctx.session.currentScene = 'ai-help';
    
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç AI –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å:', {
      reply_markup: {
        keyboard: [
          [{ text: 'üí° –ò–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π' }],
          [{ text: 'üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞' }],
          [{ text: 'üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('üí° –ò–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤–∞—à–µ–≥–æ –±–æ—Ç–∞...');
    
    try {
      const projectType = ctx.session.inquiryData.projectType || 'Telegram-–±–æ—Ç';
      const projectGoal = ctx.session.inquiryData.projectGoal || ctx.session.inquiryData.projectDescription || '–¥–ª—è –±–∏–∑–Ω–µ—Å–∞';
      
      const prompt = `–ü—Ä–µ–¥–ª–æ–∂–∏ —Ç–æ–ø-5 —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è ${projectType}, —Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ: ${projectGoal}. –û–ø–∏—à–∏ –∫–∞–∂–¥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.`;
      
      const suggestions = await generateSuggestions(prompt);
      
      await ctx.reply(`–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:\n\n${suggestions}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: '‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏' }],
            [{ text: 'üîÑ –î—Ä—É–≥–∏–µ –∏–¥–µ–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error('Error generating function ideas', error);
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  bot.hears('üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –±—é–¥–∂–µ—Ç–∞...');
    
    try {
      const projectType = ctx.session.inquiryData.projectType || 'Telegram-–±–æ—Ç';
      const features = ctx.session.inquiryData.features || '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏';
      
      const prompt = `–û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ${projectType} —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏: ${features}. –î–∞–π —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.`;
      
      const budgetEstimation = await generateSuggestions(prompt);
      
      await ctx.reply(`–í–æ—Ç –æ—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n${budgetEstimation}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: '‚úÖ –í—ã–±—Ä–∞—Ç—å –±—é–¥–∂–µ—Ç' }],
            [{ text: 'üîÑ –£—Ç–æ—á–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error('Error generating budget estimation', error);
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –±—é–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  bot.hears('üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, –∫–∞–∫–æ–π —Ç–∏–ø –±–æ—Ç–∞ –ª—É—á—à–µ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á...');
    
    try {
      const projectGoal = ctx.session.inquiryData.projectGoal || ctx.session.inquiryData.projectDescription || '–¥–ª—è –±–∏–∑–Ω–µ—Å–∞';
      
      const prompt = `–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∏–ø Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–∏: ${projectGoal}. –û–±—ä—è—Å–Ω–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–æ—Ç–∞ –∏ –ø–æ—á–µ–º—É –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏. –ü—Ä–µ–¥–ª–æ–∂–∏ 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.`;
      
      const recommendations = await generateSuggestions(prompt);
      
      await ctx.reply(`–í–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n${recommendations}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' }],
            [{ text: 'üîÑ –î—Ä—É–≥–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } catch (error) {
      logger.error('Error generating bot type recommendations', error);
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  bot.hears('‚úÖ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    if (ctx.message && ctx.message.reply_to_message) {
      const replyText = (ctx.message.reply_to_message as any).text || '';
      const aiSuggestions = replyText.replace('–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:\n\n', '');
      ctx.session.inquiryData.features = aiSuggestions;
      logger.info(`User ${ctx.from.id} added AI-suggested functions`);
      
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', {
        reply_markup: {
          keyboard: [
            [{ text: 'üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞' }],
            [{ text: 'üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞' }],
            [{ text: '‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç AI.');
    }
  });
  
  bot.hears('‚úÖ –í—ã–±—Ä–∞—Ç—å –±—é–¥–∂–µ—Ç', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:', {
      reply_markup: {
        keyboard: [
          [{ text: '–¥–æ 100 000 ‚ÇΩ' }, { text: '100 000 - 300 000 ‚ÇΩ' }],
          [{ text: '300 000 - 600 000 ‚ÇΩ' }, { text: '–æ—Ç 600 000 ‚ÇΩ' }],
          [{ text: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
        ],
        resize_keyboard: true
      }
    });
  });
  
  bot.hears('‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    if (ctx.message && ctx.message.reply_to_message) {
      const replyText = (ctx.message.reply_to_message as any).text || '';
      const aiRecommendations = replyText.replace('–í–æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:\n\n', '');
      ctx.session.inquiryData.projectType = aiRecommendations.split('\n')[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ —Ç–∏–ø
      logger.info(`User ${ctx.from.id} accepted AI-suggested bot type`);
      
      await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±–Ω–æ–≤–∏–ª —Ç–∏–ø –±–æ—Ç–∞ –≤ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', {
        reply_markup: {
          keyboard: [
            [{ text: 'üí° –ò–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π' }],
            [{ text: 'üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞' }],
            [{ text: '‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞ –æ—Ç AI.');
    }
  });
  
  bot.hears('‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    logger.info(`User ${ctx.from.id} continued with inquiry after AI help`);
    
    if (!ctx.session.inquiryData.budget) {
      ctx.session.currentScene = 'budget';
      await ctx.reply('–ö–∞–∫–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?', {
        reply_markup: {
          keyboard: [
            [{ text: '–¥–æ 100 000 ‚ÇΩ' }, { text: '100 000 - 300 000 ‚ÇΩ' }],
            [{ text: '300 000 - 600 000 ‚ÇΩ' }, { text: '–æ—Ç 600 000 ‚ÇΩ' }],
            [{ text: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } else {
      ctx.session.currentScene = 'summary';
      try {
        const prompt = `–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
        –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${ctx.session.inquiryData.projectType}
        –¶–µ–ª—å: ${ctx.session.inquiryData.projectGoal || ctx.session.inquiryData.projectDescription}
        –§—É–Ω–∫—Ü–∏–∏: ${ctx.session.inquiryData.features || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
        –ë—é–¥–∂–µ—Ç: ${ctx.session.inquiryData.budget}
        –°—Ä–æ–∫–∏: ${ctx.session.inquiryData.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
        
        –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–∏—Ñ–∞.`;
        
        const summary = await generateSuggestions(prompt);
        ctx.session.inquiryData.clientComment = summary;
        
        await ctx.reply('–Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:', {
          reply_markup: {
            keyboard: [
              [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' }],
              [{ text: 'üîÑ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
            ],
            resize_keyboard: true
          }
        });
      } catch (error) {
        logger.error('Error generating final inquiry', error);
        await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  });
  
  bot.hears('üîÑ –î—Ä—É–≥–∏–µ –∏–¥–µ–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π...');
    bot.handleUpdate(ctx.update); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "üí° –ò–¥–µ–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π"
  });
  
  bot.hears('üîÑ –£—Ç–æ—á–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ç–æ—á–Ω–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –±—é–¥–∂–µ—Ç–∞...');
    bot.handleUpdate(ctx.update); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "üìä –û—Ü–µ–Ω–∫–∞ –±—é–¥–∂–µ—Ç–∞"
  });
  
  bot.hears('üîÑ –î—Ä—É–≥–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞...');
    bot.handleUpdate(ctx.update); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "üîÆ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –±–æ—Ç–∞"
  });
  
  bot.hears('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    logger.info(`User ${ctx.from.id} went back from AI help`);
    
    if (ctx.session.inquiryData.projectType) {
      ctx.session.currentScene = 'features';
      await ctx.reply('–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –≤ –≤–∞—à–µ–º –±–æ—Ç–µ?', {
        reply_markup: {
          keyboard: [
            [{ text: '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' }, { text: '–ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤' }],
            [{ text: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM' }, { text: 'WebApp –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }],
            [{ text: 'AI-—Ñ—É–Ω–∫—Ü–∏–∏' }, { text: '–î—Ä—É–≥–æ–µ' }],
            [{ text: 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    } else {
      ctx.session.currentScene = 'goal';
      await ctx.reply('–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?', {
        reply_markup: {
          keyboard: [
            [{ text: '–ò–Ω—Ñ–æ-–±–æ—Ç' }, { text: '–ë–∏–∑–Ω–µ—Å-–±–æ—Ç' }],
            [{ text: '–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂' }, { text: '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç' }],
            [{ text: '–î—Ä—É–≥–æ–µ' }],
            [{ text: 'ü§ñ AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }, { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' }]
          ],
          resize_keyboard: true
        }
      });
    }
  });
  
  bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', async (ctx) => {
    if (ctx.session.currentScene !== 'ai-help') return;
    
    logger.info(`User ${ctx.from.id} cancelled inquiry from AI help`);
    
    ctx.session.inquiryData = {
      name: '',
      contact: '',
      username: '',
      projectType: '',
      projectGoal: '',
      projectDescription: '',
      features: '',
      integrations: '',
      timeline: '',
      budget: '',
      specialRequirements: '',
      clientComment: ''
    };
    
    ctx.session.currentScene = 'welcome';
    await ctx.reply('–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â—ë —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', {
      reply_markup: {
        keyboard: [
          [{ text: 'üîç –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' }],
          [{ text: '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º' }]
        ],
        resize_keyboard: true
      }
    });
  });
};
